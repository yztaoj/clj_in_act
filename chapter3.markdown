	构成clojure的模块
当人们已经擅长某种事情（编程语言），然后试着学习新的（编程语言）的时候，他们经常会掉进Martin Fowler称之为成长的大沟的东西。对于编程来说，大沟意味着当一个人需要重新学习用新的语言做同样的事情的时候经历的生产力的降低。我就曾经做过切换到之前擅长的语言来把活儿干完的事情。经常需要试探好多次来克服足够多的困难来把事情完成。接下来的几章目标就是这个：我们将会更加细节的检视clojure的基本概念。读完它们之后，你将会足够舒服的解决合理复杂度的问题。我们也会覆盖到这个语言的大多数构造，其中大多都是其他语言的用户所熟悉的。
首先，我们将检查函数的一些细节。Lisp是在数学环境中诞生的，函数是数学的基本元素。clojure把函数作为基本模块，所以掌握函数是学习clojure的基础。我们然后会看到命名空间是如何帮助组织大的程序的。这和java的包很像；这是把代码通过分割成多个逻辑模块来组织的简单办法。
写一部分将会提到变量，它们表达了clojure里面全局可见的实体。理解它们是高效使用clojure的关键。你也会学到为什么它们是特殊的，得益与它们的动态范围规则（与更熟悉的词法范围规则相反）。这一章将会变量及其使用的细节。在下面是关于解构的部分，它们对多数的语言是不常见的。解构是可以优雅的一个在大数据结构里面访问你感兴趣的数据元素。
最后，我们将会用元数据的部分来总结这一章。元数据是关联正交数据和普通的clojure对象的独特的方法。不用更多的麻烦，让我们先来检视clojure如何创建和使用函数。
3。1函数
前面讨论过，Lisp是数学环境中诞生的，是一个函数式的语言。函数式语言首先把函数当成一等公民。这意味着：
函数可以动态的创建（在运行时）
函数可以作为别的函数的参数
函数可以作为别的函数的返回值
函数可以作为元素保存在其他的数据结构里面（如列表）
值得重复的是，clojure函数是对象，并且因为遵循以上的规则，它们可以用一种有趣的方式谁用。这部分将会给你函数及其工作方式的概观。我们将会从定以简单的函数开始，包括指定或者可变参数个数的函数。接着我们会展示如何使用do构件来允许副作用。之后，我们会匿名函数和使用它们的快捷方式，接着是把递归作为循环的一种方式。在这部分的结束我们将会讨论高阶函数和闭包。作为开始，我们来看看clojure用于定义函数的方法。
3.1.1 定义函数
